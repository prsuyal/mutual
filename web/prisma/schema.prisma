generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  handle        String    @unique
  name          String
  email         String    @unique
  createdAt     DateTime  @default(now())
  image         String?
  emailVerified Boolean   @default(true)
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  reviews       Review[]
  sessions      Session[]
  sentFriendRequests     FriendRequest[] @relation("SentRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedRequests")
  friendships            Friendship[]    @relation("UserFriends")
}

model FriendRequest {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  createdAt  DateTime @default(now())
  
  sender     User     @relation("SentRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("ReceivedRequests", fields: [receiverId], references: [id], onDelete: Cascade)
  
  @@unique([senderId, receiverId])
  @@index([senderId])
  @@index([receiverId])
}

model Friendship {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  createdAt DateTime @default(now())
  
  user      User     @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, friendId])
  @@index([userId])
  @@index([friendId])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                   String    @id @default(cuid())
  userId               String
  accessToken          String?
  refreshToken         String?
  expiresAt            DateTime?
  accountId            String    @unique
  providerId           String
  password             String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  accessTokenExpiresAt DateTime?
  idToken              String?
  scope                String?
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
}

model Activity {
  id         String   @id @default(cuid())
  placeId    String   @unique
  name       String
  type       String?
  lat        Float?
  lng        Float?
  priceLevel Int?
  hoursJson  Json?
  ratingAgg  Float?
  reviews    Review[]
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  activityId String
  rating     Int
  text       String?
  createdAt  DateTime @default(now())
  activity   Activity @relation(fields: [activityId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}
